# Модуль 11_1. "Обзор сторонних библиотек Python"
# =========================================================
'''Выберите одну или несколько сторонних библиотек Python.
После выбора библиотек(-и) изучите документацию к ней(ним),

Если вы выбрали:
requests - запросить данные с сайта и вывести их в консоль.
pandas - считать данные из файла, выполнить простой анализ данных
(на своё усмотрение) и вывести результаты в консоль.
numpy - создать массив чисел, выполнить математические операции с массивом
и вывести результаты в консоль.
matplotlib - визуализировать данные с помощью библиотеки любым
удобным для вас инструментом из библиотеки.
pillow - обработать изображение, например, изменить его размер,
 применить эффекты и сохранить в другой формат.'''
# ----------------------------------------------------------------------------------
# библиотека - NumPy.
# Возможности NumPy:
# - Основным объектом в NumPy является многоразмерный массив (ndarray),
# который позволяет хранить данные в одном или нескольких измерениях.
# - NumPy позволяет выполнять операции над массивами без использования циклов,
# что значительно ускоряет вычисления.
# Арифметические операции могут применяться к целым массивам.
# В библиотеке множество встроенных математических функций для выполнения операций,
# таких как `sin`, `cos`, `exp`, `log` и другие.
# - NumPy предоставляет функции для выполнения различных операций линейной алгебры:
# вычисление детерминантов, обратных матриц, решения систем линейных уравнений и т.д.
# - Библиотека включает полезные функции для вычисления статистических характеристик,
# таких как среднее, медиана, стандартное отклонение,корреляция.
# - NumPy позволяет изменять размер, обрезать, объединять или разделять массивы.
# Это делает работу с данными более гибкой.
# - Поддерживаются сложные операции индексации и срезов,
# что позволяет извлекать и изменять определенные элементы или под массивы.
#
import numpy as np

# Создаем одномерный и двумерный массив, выполняем арифметические операции —
# сложение элементов одномерного массива и умножение их на 2.

# Создание одномерного массива
arr = np.array([1, 3, 5, 7])
print("Одномерный массив:", arr)

# Выполнение арифметические операции
# Сумма элементов массива
summ = np.sum(arr)
print("Сумма элементов массива:", summ)
squared = arr * 2
print("Элементы массива умноженные на 2:", squared)

# Создание двумерного массива
matrix = np.array([[1, 4, 6], [7, 8, 9]])
print("Двумерный массив:\n", matrix)
# Сумма элементов двумерного массива
print( "Сумма элементов двумерного массива:\n", np.sum(matrix))

# Создание массива случайных чисел
data = np.random.randint(1, 51, size=10)  # 10 случайных целых чисел от 1 до 50
print("Случайные числа:", data)

# Вычисление статистических показателей
mean_value = np.mean(data)  # среднее значение
print("Среднее:", mean_value)
median_value = np.median(data)  # медиана
print("Медиана:", median_value)
std_dev = np.std(data)          # стандартное отклонение
print("Стандартное отклонение:", std_dev)

# Выполняем операции сложения и умножения матриц, а также вычисляем обратную матрицу

# Определение двумерных массивов (матриц)
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

# Сложение матриц
C = A + B
print("Сложение матриц:\n", C)

# Умножение матриц
# При умножении матриц важно, чтобы
# количество столбцов первой матрицы было равно количеству строк второй матрицы.
D = np.dot(A, B)
print("Умножение матриц:\n", D)

# Вычисление обратной матрицы
A_inv = np.linalg.inv(A)
print("Матрица обратная матрице A:\n", A_inv)
#----------------------------------------------------------------